-- vim: ft=teal expandtab sw=3 ts=3
local type luv = require("luv")

global record vim
   -- TODO: Either find a way to generate these or at least find a comprehensive list to put a bunch of 'TODO' stub definitions here
   --    Sadly, there doesn't seem to be a nice way to serialize all of these
   --    since they're lazily brought in as you call them
   --    this might be the only way since user defined functions are also called here
   --    ex vim.fn["MyPlugin#MyFunction"]() so
   -- VIM_fn = record -- if record maps were a thing
   --    {string:function(...: any): (any)}
   --    mode: function(): Mode
   --    ...
   -- end

   -- TODO:
   -- vim.treesitter

   loop: luv
   uv: luv

   type WindowId = integer
   type BufferId = integer
   type TabpageId = integer
   type NamespaceId = integer
   type AutocmdId = integer
   type AutocmdGroupId = integer

   interface DecorationProviderCallbacks
      on_start: function(string, integer): boolean
      on_buf: function(string, BufferId, integer): boolean
      on_win: function(string, WindowId, BufferId, integer, integer): boolean
      on_line: function(string, WindowId, BufferId, integer): boolean
      on_end: function(string, integer): boolean
   end

   enum OptionScope
      "global"
      "local"
   end

   interface OptionInfo2Opts
      scope: OptionScope
      win: WindowId
      buf: BufferId
   end

   interface OptionInfo
      name: string
      shortname: string
      type: string
      default: any
      was_set: boolean
      last_set_sid: integer
      last_set_linenr: integer
      last_set_chan: integer
      scope: string
      global_local: boolean
      commalist: boolean
      flaglist: boolean
   end

   interface GetOptionValueOpts
      scope: OptionScope
      win: WindowId
      buf: BufferId
      filetype: string
   end

   interface AutocmdCallbackData
      id: AutocmdId
      event: string
      group: AutocmdGroupId
      file: string
      match: string
      buf: BufferId
      data: any
   end

   record AutocmdOpts
      group: string | AutocmdId
      pattern: string | {string}
      buffer: BufferId
      desc: string
      callback: string | function(AutocmdCallbackData): any
      command: string
      once: boolean
      nested: boolean
   end

   record AugroupOpts
      clear: boolean
   end

   enum UserCommandComplete
      "arglist"
      "augroup"
      "breakpoint"
      "buffer"
      "color"
      "command"
      "compiler"
      "diff_buffer"
      "dir"
      "dir_in_path"
      "environment"
      "event"
      "expression"
      "file"
      "file_in_path"
      "filetype"
      "function"
      "help"
      "highlight"
      "history"
      "keymap"
      "locale"
      "lua"
      "mapclear"
      "mapping"
      "menu"
      "messages"
      "option"
      "packadd"
      "runtime"
      "scriptnames"
      "shellcmd"
      "shellcmdline"
      "sign"
      "syntax"
      "syntime"
      "tag"
      "tag_listfiles"
      "user"
      "var"
      --"custom"
      --"customlist"
   end

   interface CreateUserCommandOpts
      name: string
      desc: string
      force: boolean
      preview: function(CommandArguments, NamespaceId, BufferId): integer
      bang: boolean
      nargs: integer | string
      complete: UserCommandComplete | function(string, string, integer): string | {string}
      range: boolean | string | integer
      count: integer
      addr: string
      bar: boolean
      register: boolean
      buffer: boolean
      keepscript: boolean
   end

   interface CommandArguments
      name: string
      args: string
      fargs: {string}
      nargs: integer
      bang: boolean
      line1: integer
      line2: integer
      range: integer
      count: integer
      reg: string
      mods: string
      smods: table
   end

   fn: {string:function(...: any): (any)}
   record cmd
      interface _cmd
         metamethod __call: function(self, string | CommandArguments)
      end

      metamethod __call: function(self, string | CommandArguments)
      metamethod __index: function(self, string): _cmd
   end
   call: function(func: string, ...: any)
   call: function(string, ...: any): any

   enum Mode
      "n" -- Normal
      "no" -- Operator-pending
      "nov" -- Operator-pending (forced charwise |o_v|)
      "noV" -- Operator-pending (forced linewise |o_V|)
      "no" -- Operator-pending (forced blockwise |o_CTRL-V|)
      "niI" -- Normal using |i_CTRL-O| in |Insert-mode|
      "niR" -- Normal using |i_CTRL-O| in |Replace-mode|
      "niV" -- Normal using |i_CTRL-O| in |Virtual-Replace-mode|
      "v" -- Visual by character
      "V" -- Visual by line
      "" -- Visual blockwise
      "s" -- Select by character
      "S" -- Select by line
      "" -- Select blockwise
      "i" -- Insert
      "ic" -- Insert mode completion |compl-generic|
      "ix" -- Insert mode |i_CTRL-X| completion
      "R" -- Replace |R|
      "Rc" -- Replace mode completion |compl-generic|
      "Rv" -- Virtual Replace |gR|
      "Rx" -- Replace mode |i_CTRL-X| completion
      "c" -- Command-line editing
      "cv" -- Vim Ex mode |gQ|
      "ce" -- Normal Ex mode |Q|
      "r" -- Hit-enter prompt
      "rm" -- The -- more -- prompt
      "r?" -- |:confirm| query of some sort
      "!" -- Shell or external command is executing
      "t" -- Terminal mode: keys go to the job
   end

   record InspectOpts
      depth: integer
      newline: string
      indent: string
      process: function(any, {string}): any
   end
   inspect: function(any, ?InspectOpts): string

   interface BlockingMode
      mode: Mode
      blocking: boolean
   end

   record log
      record levels
         DEBUG: integer
         INFO: integer
         HINT: integer
         WARN: integer
         ERROR: integer
      end
   end
   notify: function(msg: string, log_level: integer, opts: table)
   notify_once: function(msg: string, level: integer, opt: table)
   paste: function({string}, integer): boolean
   schedule_wrap: function(function): function
   deep_equal: function(any, any): boolean
   deepcopy: function<T>(T): T
   defer_fn: function(function, integer)
   startswith: function(string, string): boolean
   endswith: function(string, string): boolean
   gsplit: function(string, string, boolean): function(): string
   is_callable: function(any): boolean
   list_extend: function<T>({T}, {T}, integer, integer): {T}
   list_extend: function<T, K>({T}, {K}, integer, integer): {T|K}
   list_slice: function<T>({T}, integer, integer): {T}
   pesc: function(string): string
   split: function(string, string, boolean): {string}
   wait: function(integer)

   tbl_add_reverse_lookup: function(table)
   tbl_contains: function<T>({T}, T): boolean

   tbl_count: function(table): integer

   enum ExtendBehavior
      "error"
      "keep"
      "force"
   end
   tbl_extend: function(ExtendBehavior, table, table, ...: table): table
   tbl_extend: function<T>(ExtendBehavior, {T:any}, {T:any}, ...: {T:any}): {T:any}
   tbl_extend: function<T>(ExtendBehavior, {any:T}, {any:T}, ...: {any:T}): {any:T}
   tbl_extend: function<T,V>(ExtendBehavior, {T:V}, {T:V}, ...: {T:V}): {T:V}
   tbl_deep_extend: function(ExtendBehavior, table, table, ...: table): table
   tbl_deep_extend: function<T>(ExtendBehavior, {T:any}, {T:any}, ...: {T:any}): {T:any}
   tbl_deep_extend: function<T>(ExtendBehavior, {any:T}, {any:T}, ...: {any:T}): {any:T}
   tbl_deep_extend: function<T,V>(ExtendBehavior, {T:V}, {T:V}, ...: {T:V}): {T:V}

   tbl_filter: function<T>(function(T): (boolean), {T})
   tbl_filter: function(function(any): (boolean), {any})

   tbl_flatten: function<T>({T|{T}}): {T}
   tbl_flatten: function({any|{any}}): {any}

   tbl_isempty: function(table): boolean

   tbl_islist: function(table): boolean

   tbl_keys: function<T>({T:any}): {T}

   tbl_values: function<T>({any:T}): {T}

   tbl_map: function<A, B, C>(function(B): (C), {A:B}): {A:C}
   tbl_map: function(function(any): (any), table): table

   trim: function(string): string

   enum TypeName
      "table" "t"
      "string" "s"
      "number" "n"
      "boolean" "b"
      "function" "f"
      "callable"
      "nil"
      "thread"
      "userdata"
   end

   type Validator = TypeName | {TypeName} | function(any): (boolean, string)
   validate: function(string, any, Validator, ?boolean, ?string)

   -- Deprecated form
   type ValidatorSpec = {string:{any, Validator, boolean|string}}
   validate: function(ValidatorSpec)

   record Regex
      match_str: function(Regex, string): integer, integer
      match_line: function(Regex, integer, integer, integer, integer): integer, integer
   end
   regex: function(string): Regex

   record DiffOpts
      enum ResultType
         "unified"
         "indices"
      end

      enum Algorithm
         "myers"
         "minimal"
         "patience"
         "histogram"
      end

      on_hunk: function(integer, integer, integer, integer): integer
      result_type: ResultType
      linematch: boolean | integer
      algorithm: Algorithm
      ctxlen: integer
      interhunkctxlen: integer
      ignore_whitespace: boolean
      ignore_whitespace_change: boolean
      ignore_whitespace_change_at_eol: boolean
      ignore_cr_at_eol: boolean
      ignore_blank_lines: boolean
      indent_heuristic: boolean
   end
   diff: function(a: string, b: string, ?DiffOpts): string | {{integer, integer, integer, integer}}
   -- TODO: Is this possible/desirable?
   -- diff: function(a: string, b: string, DiffOpts where result_type == "unified"): string
   -- diff: function(a: string, b: string, DiffOpts where result_type == "indices"): {{integer, integer, integer, integer}}
   -- diff: function(a: string, b: string, DiffOpts where on_hunk)

   record VersionInfo
      api_compatible: integer
      api_level: integer
      api_prerelease: integer
      major: integer
      minor: integer
      patch: integer
   end

   version: function(): VersionInfo

   uri_from_bufnr: function(bufnr: BufferId): string
   uri_from_fname: function(path: string): string
   uri_to_bufnr: function(uri: string): integer
   uri_to_fname: function(uri: string): string

   pretty_print: function(obj: any): string

   region: function(bufnr: BufferId, pos1: {integer}, pos2: {integer}, regtype: string, inclusive: boolean): {integer:{integer}}

   record filetype
      -- Directly translated from $VIMRUNTIME/lua/vim/filetype.lua
      type mapfn = function(string, BufferId, ...: any): string, function(BufferId)
      record mapopts
         priority: number
      end
      type maptbl = { string | mapfn, mapopts }
      type value = string | mapfn | maptbl
      type mapping = {string:value}

      record AddOpts
         extension: mapping
         filename: mapping
         pattern: mapping
      end
      add: function(AddOpts)

      get_option: function(string, string): string|boolean|integer

      record MatchArgs
         buf: integer
         filename: string
         contents: {string}
      end
      match: function(MatchArgs): string, function(BufferId)
   end

   record mpack
      encode: function(obj: any): string
      decode: function(str: string): any
   end

   record spell
      enum MistakeKind
         "bad"
         "rare"
         "local"
         "caps"
      end
      check: function(str: string): {{string, MistakeKind, integer}}
   end

   in_fast_event: function(): boolean

   -- special nil for filling tables in rpc stuff
   interface NIL is userdata
   end

   empty_dict: function(): table
   on_key: function(function(string), integer): integer

   rpcnotify: function(integer, string, ...: string)
   rpcrequest: function(integer, string, ...: string)

   stricmp: function(string, string): integer
   str_utfindex: function(string, integer): integer, integer
   str_byteindex: function(string, integer, boolean): integer

   schedule: function(function)

   schedule_wrap: function(function): function

   type_idx: boolean

   val_idx: boolean

   types: {string|integer:string|integer}

   record keymap
      record DelOpts
         buffer: boolean | integer
      end

      record SetOpts
         buffer: boolean | integer
         callback: function
         desc: string
         expr: boolean
         nowait: boolean
         remap: boolean
         replace_keycodes: boolean
         script: boolean
         silent: boolean
         unique: boolean
      end

      set: function(mode: string|{string}, lhs: string, rhs: string|function(), opts: SetOpts)
      del: function(modes: string|{string}, lhs: string, opts: DelOpts)
   end

   record EventData --TODO: this is a vim thing, so types aren't really documented
      abort: any
      chan: integer
      cmdlevel: any
      cmdtype: any
      cwd: string
      inclusive: boolean
      scope: any
      operator: any
      regcontents: any
      regname: any
      regtype: any
      visual: any
      completed_item: any
      height: any
      width: any
      row: integer
      col: integer
      size: any
      scrollbar: any
      changed_window: any
   end

   record hl
      record OnYankOpts
         higroup: string
         timeout: integer
         on_macro: boolean
         on_visual: boolean
         event: EventData
         priority: integer
      end
      on_yank: function(OnYankOpts)

      record RangeOpts
         regtype: string
         inclusive: boolean
         priority: integer
         timeout: integer
      end
      range: function(
         bufnr: BufferId,
         ns: NamespaceId,
         higroup: string,
         start: {integer, integer},
         finish: {integer, integer},
         options: RangeOpts
      ): luv.Timer, function()

      record priorities
         syntax: integer
         treesitter: integer
         semantic_tokens: integer
         diagnostics: integer
         user: integer
      end
   end
   highlight: hl

   record diagnostic
      type Severity = integer
      record severity is {string} -- would be great if this could be a tuplerecord
         ERROR: Severity
         WARN: Severity
         INFO: Severity
         HINT: Severity
         E: Severity
         W: Severity
         I: Severity
         H: Severity
      end

      record Diagnostic
         lnum: integer -- The starting line of the diagnostic
         end_lnum: integer -- The final line of the diagnostic
         col: integer -- The starting column of the diagnostic
         end_col: integer -- The final column of the diagnostic
         severity: Severity -- The severity of the diagnostic |vim.diagnostic.severity|
         message: string -- The diagnostic text
         source: string -- The source of the diagnostic
      end
      record ConfigOpts
         record UnderlineOpts
            severity: Severity
         end
         record VirtualTextOpts
            severity: Severity
            source: string
            format: function(diagnostic: Diagnostic): string
         end
         record SignsOpts
            severity: Severity
            priority: integer
         end

         underline: boolean|UnderlineOpts
         virtual_text: boolean|VirtualTextOpts
         signs: boolean|SignsOpts
         float: OpenFloatOpts
         update_in_insert: boolean
         severity_sort: boolean
      end
      record GetOpts
         namespace: NamespaceId
         lnum: integer
         severity: Severity
      end
      record GotoOpts
         namespace: NamespaceId
         cursor_position: {integer, integer}
         wrap: boolean
         severity: Severity
         float: boolean|OpenFloatOpts
         win_id: WindowId
      end
      record OpenFloatOpts
         enum Scope
            "buffer"
            "line"
            "cursor"
         end

         namespace: NamespaceId
         scope: Scope
         pos: integer|{integer, integer}
         severity_sort: boolean
         severity: Severity
         header: string|{string, string}
         source: string
         format: function(diagnostic: Diagnostic): string
         prefix: string|{string, string}|function(diagnostic: Diagnostic, i: integer, total: integer): string, string
      end
      record SetLocListOpts
         namespace: NamespaceId
         winnr: WindowId
         open: boolean
         title: string
         severity: Severity
      end
      record SetQfListOpts
         namespace: NamespaceId
         open: boolean
         title: string
         severity: Severity
      end
      config: function(opts: ConfigOpts, namespace: NamespaceId)
      disable: function(bufnr: BufferId, namespace: NamespaceId)
      enable: function(bufnr: BufferId, namespace: NamespaceId)
      fromqflist: function(list: {any}): {Diagnostic}
      get: function(bufnr: BufferId, opts: GetOpts)
      get_namespace: function(namespace: NamespaceId): {string:integer}
      get_namespace: function(namespace: NamespaceId): {{string:integer}}
      get_next: function(opts: GotoOpts): Diagnostic
      get_next_pos: function(opts: GotoOpts): {integer, integer}
      get_prev: function(opts: GotoOpts): Diagnostic
      get_prev_pos: function(opts: GotoOpts): {integer, integer}
      goto_next: function(opts: GotoOpts)
      goto_prev: function(opts: GotoOpts)
      hide: function(namespace: NamespaceId, bufnr: BufferId)
      match: function(str: string, pat: string, groups: {string}, severity_map: {string:string}, defaults: {string:any}): Diagnostic
      open_float: function(opts: OpenFloatOpts): {integer, integer}
      reset: function(namespace: NamespaceId, bufnr: BufferId)
      set: function(namespace: NamespaceId, bufnr: BufferId, diagnostics: {Diagnostic}, opts: ConfigOpts)
      setloclist: function(opts: SetLocListOpts)
      setqflist: function(opts: SetQfListOpts)
      show: function(namespace: NamespaceId, bufnr: BufferId, diagnostics: {Diagnostic}, opts: ConfigOpts)
      toqflist: function({Diagnostic}): {string:any}
   end

   record lsp
      record buf
         hover: function
      end
      buf_attach_client: function(bufnr: BufferId, client_id: integer)
      buf_get_clients: function(bufnr: BufferId)
      buf_is_attached: function(bufnr: BufferId, client_id: integer)
      buf_notify: function(bufnr: BufferId, method: string, params: string): boolean
      buf_request: function(bufnr: BufferId, method: string, params: table, handler: function): {integer:integer}, function
      buf_request_sync: function(bufnr: BufferId, method: string, params: table, timeout_ms: integer): {integer:integer}, string

      record Client
         request: function(Client)
      end
      client: function(): Client
   end

   record Option
      append: function(Option, string)
      prepend: function(Option, string)
      remove: function(Option, string)
      get: function(Option): any

      metamethod __add: function(Option, string): Option
      metamethod __sub: function(Option, string): Option
      metamethod __pow: function(Option, string): Option
   end
   opt: {string:Option}
   opt_local: {string:Option}
   opt_global: {string:Option}

   g: {string:any}
   t: {string:any}
   v: {string:any}
   b: {string:any}
   w: {string:any}
   env: {string:any}

   --[[$ALL_OPTS$]]
   o: AllOptions

   --[[$GLOBAL_OPTS$]]
   go: GlobalOptions

   --[[$BUFFER_OPTS$]]
   bo: BufferOptions

   --[[$WINDOW_OPTS$]]
   wo: WindowOptions

   --[[$API$]]

   record json
      record EncodeOpts
         escape_slash: boolean
      end

      record DecodeOpts
         record Luanil
            object: boolean
            array: boolean
         end

         luanil: Luanil
      end

      encode: function(string, ?EncodeOpts)
      decode: function(string, ?DecodeOpts)
   end

   record base64
      encode: function(string): string
      decode: function(string): string
   end

   record SystemCompleted
      code: integer
      signal: integer
      stdout: string
      stderr: string
   end

   record SystemObj
      cmd: {string}
      pid: integer

      wait: function(SystemObj, ?integer): SystemCompleted
      kill: function(SystemObj, integer|string)
      write: function(SystemObj, string)
      is_closing: function(SystemObj): boolean
   end

   record SystemOpts
      cwd: string
      env: {string:string}
      clear_env: boolean
      stdin: string | {string} | boolean
      stdout: boolean | function(string, string)
      stderr: boolean | function(string, string)
      text: boolean
      timeout: integer
      detach: boolean
   end

   system: function({string}, ?SystemOpts, function(SystemCompleted)): SystemObj

   record Ringbuf<T>
      clear: function(self)
      push: function(self, T)
      pop: function(self): T
      peek: function(self): T

      metamethod __call: function(self): T
   end
   ringbuf: function<T>(integer): Ringbuf<T>

   record ui
      record InputOpts
         prompt: string
         default: string
         completion: string
         highlight: function()
      end
      input: function(InputOpts, function(string))

      record SelectOpts<T>
         prompt: string
         format_item: function(T): string
         kind: string
      end
      select: function<T>({T}, SelectOpts<T>, function(T, integer))

      record OpenOpts
         cmd: {string}
      end
      open: function(string, ?OpenOpts): SystemObj, string
   end
end

